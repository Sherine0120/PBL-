#define BLYNK_TEMPLATE_ID “TMPL61XBA8oxd”
#define BLYNL_TEMPLETE_NAME “No Man No Power”
#define BLYNK_AUTH_TOKEN “Zke3cE1nF01mW3J9-4fw5XGqCjn90SJQ”
#include <Wifi.h>
#include <WifiClient.h>
#include <BlynkSimpleEsp32.h>
#include <Wire.h>
#include <RTClib.h>
#include <LiquidCrystal_12C.h>
RTC_DS3231 rtc;
LiquidCrystak_12C lcd(0x27, 16, 2)
#define PIR_PIN 14
#define RELAY1_PIN 27
#define RELAY2_PIN 26
#define SWITCH_PIN 34
#define BLYNK_ONOFF_VPIN V0
char sside[] = “YourWifiSSID”;
char pass[] = “YourWifiPassword”
unsigned long lastMotionTIme = 0
unsigned long motionTImeoute = 30000
bool systemOn = false;
bool systemSleeping = false;
bool blynkEnabled = true;
BLYNK_WRITE(BLYNK_ONOFF_VPIN) {
blynkEnabled = param.asInt();
}
void setup() {
Serial.begin(115200);
pinMode(PIR_PIN, INPUT);
pinMode(RELAY1_PIN, OUTPUT);
pinMode(RELAY2_PIN, OUTPUT);
pinMode(SWITCH_PIN, INPUT);
digitalWrite(RELAY1_PIN, LOW);
digitalWrite(RELAY2_PIN, LOW);
  
Wire.begin();
rtc.begin();
lcs.init();
lcd.backlight();
lcd.setCursor(0, 0);
lcd.print(“Connecting WIFI”);
Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
lcd.clear();
lcd.setCursor(0, 0);
lcd.print(“System Ready”);
}
void loop() {
Blynk.run();
bool switchState = digitalRead(SWITCH_PIN) == HIGH;
if (!switchstate // !blynkEnabled) {
if (systemOn // systemSleeping) {
lcd.clear():
lcd.setCursor(0, 0);
lcd.print(“switchState ? “Blynk: OFF” : SWITCH: OFF”);
lcd.setCursor(0, 1);
lcd.print(“System OFF)”
digitalWrite(RELAY1_PIN, LOW);
digitalWrite(RELAY2_PIN, LOW);
systemOn = false;
systemSleeping = false;
}
delay(500);
return;
}

if (!systemon && !systemSleeping) {
lcd.clear();
lcd.setCursor(0, 0);
lcd.print(“SWITCH ON”);
lcd.setCursor(0, 1);
lcd.print(“System ON”);
digitalWrite(RELAY1_PIN, HIGH);
digitalWrite(RELAY2_PIN, HIGH);
systemOn = true;
lastMotionTime = millis();
delay(1000);
}
if (systemOn && digitalRead(PIR_PIN) == HIGH) {
lastMotionTime = millis();
lcd.clear();
lcd.setCursor(0,0);
lcd.print(“Motion Detected”);
lcd.setCursor(0, 1);
lcd.print(“Appliance ON”);
digitalWrite(RELAY1_PIN, HIGH);
digitalWrite(RELAY2_PIN, HIGH);
}
if (systemOn && (millis() - lastMotionTime > motionTimeout)) {
lcd.clear();
lcd.setCursor(0, 0);
lcd.print(“No Motion Found”);
lcd.setCursor(0, 1);
lcd.print(“Turning OFF…”);
digitalWrite(RELAY1_PIN, LOW);
digitalWrite(RELAY2_PIN, LOW);

systemOn = false;
systemSleeping = true;
delay (2000);
}
if (systemSleeping && digitalRead(PIR_PIN) == HIGH) {
lcd.clear();
lcd.setCursor(0, 0);
lcd.print(“Motion Detected”);
lcd.setCursor(0, 1);
lcd.print(“System Re-On”);
digitalWrite(RELAY1_PIN, HIGH);
digitalWrite(RELAY2_PIN, HIGH);
systemOn = true;
systemSleeping = false;
delay (2000);
}
delay (200);
}
